<?php

$faucetAddress = "THIS-IS-FAUCET-ADDRESS-TO-AVOID-USER-INPUT-THIS-WALLET";
$sameWalletDuration = 3600*12; // 12hours
$faucetRefreshtime = 5*60; // 5mn

$coinName = "WRKZ";
$coinUnit = 100;
$sqlIP = "127.0.0.1";  // Change this
$sqluser = "faucetdb"; // Change this
$sqlpassword = "faucetPazzworD"; // Change this
$sqlDB = "faucetdb"; // Change this

$faucet_enable = 1;
$minbalance = 10000; // This is wallet_balance. Never make this lower then the $randomHigh, it could result in errors on payout.

$randomlow = 10; // 10. Need to *$coinUnit when use
$randomhigh = 20; // 20. Need to *$coinUnit when use
$fee = 0.05; // Already *$coinUnit

$rcp_server = "http://127.0.0.1:8888/json_rpc"; // Change this to walletd binding port. When binding walletd, avoid binding public IP.

function secondsToTime($seconds) {
    $dtF = new \DateTime('@0');
    $dtT = new \DateTime("@$seconds");
        if ($dtF->diff($dtT)->format('%a')>=1) {
                $dur = $dtF->diff($dtT)->format('%a day(s), %h hour(s)');
        } else {
                if ($dtF->diff($dtT)->format('%h')>=1) {
                        $dur = $dtF->diff($dtT)->format('%h hour(s), %i minute(s)');
                } else {
                        if ($dtF->diff($dtT)->format('%i')>=1) {
                                $dur = $dtF->diff($dtT)->format('%i minute(s), %s seconds');
                        } else {
                                $dur = $dtF->diff($dtT)->format('%s seconds');
                        }
                }
        }
    return $dur;
}

// Function for sending Coin
function sendWRKZ($from, $toAddr, $amount, $fee) {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
		global $rcp_server;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $rcp_server);
		curl_setopt($ch, CURLOPT_TIMEOUT, 5); //timeout in seconds
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"params\": {\"anonymity\":0, \"fee\":5,\"transfers\":[{\"amount\":".$amount.",\"address\":\"".$toAddr."\"}], \"changeAddress\": \"".$from."\"},\"jsonrpc\": \"2.0\", \"id\": \"test\",\"method\":\"sendTransaction\"}");
        curl_setopt($ch, CURLOPT_POST, 1);

        $headers = array();
        $headers[] = "Accept: application/json";
        $headers[] = "Content-Type: application/x-www-form-urlencoded";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            // echo 'Error:' . curl_error($ch);
			die("Internal error. Please report to us. Error code 1005.");
        }
        curl_close ($ch);

        $data_json = json_decode($result, true);
        $transactionHash = $data_json['result']['transactionHash'];
        if (!empty($transactionHash)) {
            // 64 characters
			if(strlen($transactionHash) !== 64) return FALSE;
        } else {
            return FALSE;
        }
        return $transactionHash;
}

    /**
     * Validates a cryptonote address
     *
     * @param   string      cryptonote address
     * @return  bool        true if valid
     * https://github.com/TheKoziTwo/xmr-integration/blob/master/classes/asset/cryptonote/class.cryptonote.php
     */
function valid_address($address)
{
        // 98 characters
        if(strlen($address) !== 98) return FALSE;

        // Start with W
        if($address[0] != 'W') return FALSE;
                if($address[1] != 'r') return FALSE;
                if($address[2] != 'k') return FALSE;
                if($address[3] != 'z') return FALSE;

        // The string can only be alphanumeric characters
        if( ! ctype_alnum($address)) return FALSE;

        return TRUE;
}
?>